version: '3.8'

services:
  dynamodb-local:
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    user: root
    ports:
      - "8000:8000"
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
    healthcheck:
      test: ["CMD-SHELL", '[ "$(curl -s -o /dev/null -I -w ''%{http_code}'' http://localhost:8000)" == "400" ]']
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - muebles-network

  dynamodb-local-setup:
    depends_on:
      dynamodb-local:
        condition: service_healthy
    image: amazon/aws-cli
    volumes:
      - "./dynamodb-local:/tmp/dynamo"
    environment:
      AWS_ACCESS_KEY_ID: 'FAKEID'
      AWS_SECRET_ACCESS_KEY: 'FAKEKEY'
      AWS_REGION: 'us-east-1'
    entrypoint:
      - bash
    command:
      '-c "for f in /tmp/dynamo/*.json; do aws dynamodb create-table --endpoint-url "http://dynamodb-local:8000" --cli-input-json file://"$${f#./}"; done"'
    networks:
      - muebles-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - muebles-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  rabbitmq-setup:
    image: rabbitmq:3-management
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    command: >
      bash -c "
        rabbitmqadmin -H rabbitmq -u guest -p guest declare queue name=event.stats.validated durable=true &&
        rabbitmqadmin -H rabbitmq -u guest -p guest declare exchange name=domainEvents type=topic &&
        rabbitmqadmin -H rabbitmq -u guest -p guest declare binding source=domainEvents destination=event.stats.validated routing_key=event.stats.validated
      "
    restart: "on-failure"
    networks:
      - muebles-network

  muebles-sas:
    build:
      context: ..
      dockerfile: ./deployment/Dockerfile
    container_name: muebles-sas
    ports:
      - "8080:8080"
    depends_on:
      dynamodb-local:
        condition: service_healthy
      rabbitmq-setup:
        condition: service_completed_successfully

    environment:
      aws.region: us-east-1
      aws.dynamodb.endpoint: http://dynamodb-local:8000
      AWS_ACCESS_KEY_ID: 'FAKEID'
      AWS_SECRET_ACCESS_KEY: 'FAKEKEY'
      muebles-sas:
    networks:
      - muebles-network

networks:
  muebles-network:
    driver: bridge